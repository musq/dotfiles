# https://man.openbsd.org/OpenBSD-current/man1/tmux.1
# https://dev.to/iggredible/useful-tmux-configuration-examples-k3g

# "bind" command is short for "bind-key"
# "set" command is short for "set-option"

#----------------------------------------------------------------------

# [<Prefix> + r] Reload tmux config
bind r source-file ~/.config/tmux.conf \; display "Reloaded tmux config!"

# Set <C-a> as Prefix
unbind C-a
set -g prefix C-a
bind C-a send-prefix

# Unset <C-b> as Prefix
unbind C-b
# Uncomment these 2 lines to enable <C-b> as an alternate Prefix
# set -g prefix2 C-b
# bind C-b send-prefix -2

#----------------------------------------------------------------------

# Enable mouse
set -g mouse on

# Rename window to reflect current program
set -g automatic-rename on   

# Make window index start at 1
set -g base-index 1
# Make pane index start at 1
set -g pane-base-index 1

# Show 12 hour clock
set -g clock-mode-style 12

# Slightly longer pane indicators display time
set -g display-panes-time 1000
# Slightly longer status messages display time
set -g display-time 1000

# Remove delay (in ms) when sending commands (default is 500 ms)
# Make Vim more responsive
set -g escape-time 1

# Enable focus events
# Needed for Vim FocusGained/FocusLost event handling
set -g focus-events on

# Increase scrollback limit
set -g history-limit 10000

# Highlight window when it has new activity, but do not display an alert
set -g monitor-activity on
set -g visual-activity off

# Set timeout (in ms) to repeat commands without hitting the <Prefix> again
# Helpful during resizing panes, and swapping windows
set -g repeat-time 1000

# Redraw status line every 5 seconds
set -g status-interval 5

#----------------------------------------------------------------------

# Pick colors here: https://michurin.github.io/xterm256-color-picker/
# Or, run this on terminal to see different color options supported by tmux:
# for i in {0..255}; do printf "\x1b[38;5;${i}mcolour${i}\n"; done

# https://github.com/tmux/tmux/wiki/FAQ#i-dont-see-italics-or-italics-and-reverse-are-the-wrong-way-round
set -g default-terminal "tmux-256color"
# Display things in 24 bit True color with Undercurl
# https://ryantravitz.com/blog/2023-02-18-pull-of-the-undercurl
# https://github.com/tmux/tmux/issues/696#issuecomment-360629057
set -ga terminal-overrides "*:Tc" # True color support
set -ga terminal-overrides "*:RGB" # True color support
set -ga terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # Undercurl support
set -ga terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # Underscore colours - needs tmux-3.0

# Colors for status line
set -g status-style bg=green,fg=color232,bold
# Colors for command line
set -g message-style bg=yellow,fg=color232,bold
# Colors for window list
set -g window-status-current-style bg=colour5,fg=colour232
set -g window-status-activity-style bg=colour246,fg=color232
# Colors for pane borders
set -g pane-border-style bg=default,fg=colour244
set -g pane-active-border-style bg=default,fg=colour198

#----------------------------------------------------------------------

# [<Prefix> + <Esc>] Enter copy mode
bind Escape copy-mode
# Use vim key bindings in copy mode
set -g mode-keys vi
bind -T copy-mode-vi 'v' send-keys -X begin-selection
bind -T copy-mode-vi 'y' send-keys -X copy-selection

# [<Prefix> + p] Insert the contents of the buffer into the current pane
bind p paste-buffer

#----------------------------------------------------------------------

# [<Prefix> + <Enter>] Switch to last active window
bind Enter last-window
# [<Prefix> + <Space>] Switch to last active session
bind Space switch-client -l

# [<Prefix> + h/j/k/l] Navigate between panes in a window
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

#----------------------------------------------------------------------

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator#tmux

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

#----------------------------------------------------------------------

# [<Prefix> + e] Renumber windows in sequential order
bind e move-window -r

# [<Prefix> + </>] Swap windows left <-> right
# No need to hit <Prefix> for subsequent keystrokes within repeat-time interval
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

# [<Prefix> + <C-o>] Rotate panes clockwise in a window
bind -r C-o rotate-window -D
# [<Prefix> + <C-i>] Rotate panes anti-clockwise in a window
bind -r C-i rotate-window -U

#----------------------------------------------------------------------

# [<Prefix> + H/J/K/L] Resize panes
# No need to hit <Prefix> for subsequent keystrokes within repeat-time interval
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

#----------------------------------------------------------------------

# [<Prefix> + |] Split pane vertically to the right
bind "|" split-window -h -c "#{pane_current_path}"
# [<Prefix> + -] Split pane horizontally to below
bind "-" split-window -v -c "#{pane_current_path}"
# [<Prefix> + \] Split pane vertically to the right with 50% of full window width
bind "\\" split-window -fh -c "#{pane_current_path}"
# [<Prefix> + _] Split pane horizontally to below with 50% of full window height
bind "_" split-window -fv -c "#{pane_current_path}"

# [<Prefix> + !] Break pane off into a new window
# This is already implemented in tmux

# [<Prefix> + v] Join pane vertically to the right
bind v choose-tree 'join-pane -h -s "%%"'
# [<Prefix> + <C-v>] Join pane vertically to the left
bind C-v choose-tree 'join-pane -bh -s "%%"'
# [<Prefix> + g] Join pane horizontally to below
bind g choose-tree 'join-pane -v -s "%%"'
# [<Prefix> + <C-g>] Join pane horizontally to above
bind C-g choose-tree 'join-pane -bv -s "%%"'
