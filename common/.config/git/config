[user]

    # Don't guess the user's identity
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855
    useConfigOnly = true

    name = "Ashish Ranjan"
    signingkey = 0xA48498494C069CCD

    # NOTE: Specify user.email in ~/.config/git/config.local

[gpg]

    # Specify gpg command
    program = gpg

[commit]

    # Sign commits using GPG
    # https://help.github.com/articles/signing-commits-using-gpg/
    gpgsign = true

[alias]

    # Basic
    a    = add
    ab   = absorb --and-rebase
    br   = branch
    c    = commit
    ca   = commit --amend
    co   = checkout
    cp   = cherry-pick
    cpa  = cherry-pick --abort
    d    = diff                                 # Inline diff
    dc   = diff --cached
    dcs  = -c delta.features=side-by-side diff --cached
    ds   = -c delta.features=side-by-side diff  # Side-by-side diff
    f    = fetch
    fu   = fetch upstream
    g    = !exec git                        # Allow `$ g g g...`
    git  = !exec git                        # Allow `$ git git git...`

    # Log
    l    = log --graph --pretty=custom      # Show custom graph
    la   = log --graph --pretty=custom --all      # Show custom graph
    lk   = log --graph --pretty=custom -10  # Sneak look current branch
    lka  = log --graph --pretty=custom -10 --all  # Sneak look all tree

    # List all aliases
    lal  = ! git config --get-regexp alias | cut -c 7- | sed -E 's/ /\t/' | sort -k 1
    # List contributors
    lc   = shortlog --email --numbered --summary

    m    = merge

    # Push
    pu   = push
    puf  = push --force-with-lease  # Optimistic Concurrency Control

    r    = reset
    rb   = rebase
    rbi  = rebase --interactive --autosquash --autostash  # Used after running `git absorb`
    rba  = rebase --abort
    rbc  = rebase --continue

    # Reflog
    rf   = reflog --pretty=custom-reflog
    rfa  = reflog --pretty=custom-reflog --all
    rfk  = reflog --pretty=custom-reflog -10
    rfka = reflog --pretty=custom-reflog -10 --all

    rt   = remote

    s    = status --short
    sh   = show --pretty=custom-full
    sl   = shortlog
    st   = stash

    # Submodule
    sd   = ! git d && git submodule foreach 'git d'   # Diff
    si   = submodule init
    ss   = ! git submodule sync && git submodule update --remote
    su   = ! git submodule foreach 'git f && git rb origin/main'  # Update
    sur  = submodule update --remote

    # Web
    web  = instaweb --httpd=webrick         # Start web-based visualizer

    # Tags
    tags = ! generate-project-tags

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List branches sorted from most to least recent
    # (by last commit date) whilst also displaying more details
    # per each branch (last commit date and author)

    b = "!f() { \
        widest_branch_name=$(git branch --format='%(refname:short)' \"$@\" | awk '{ print length() }' | sort -r -n | head -1); \
        width=$(($widest_branch_name + 4)); \
        \
        format=\"%(HEAD) \
%(align:$width)\
%(if)%(HEAD)%(then)%(color:bold)%(end)\
%(color:green)%(refname:short)\
%(if)%(upstream)%(then) %(color:red)(%(upstream:short)%(color:reset)\
%(if)%(upstream:track)%(then): %(upstream:track,nobracket)\
%(end)%(color:red)\
%(if)%(HEAD)%(then)%(color:bold)%(end))\
%(end)\
%(end)\
%(color:reset) - \
%(color:magenta)%(objectname:short) \
%(color:yellow)%(committerdate:relative) \
%(color:cyan)(%(authorname)) \
%(color:reset)\
%(color:dim)%(contents:subject)\
%(color:reset)\"; \
        \
		git branch -vv --sort=-committerdate --format=\"$format\" \"$@\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code

    cc = "!f() { \
        git log --pretty=custom --decorate --date=short --regexp-ignore-case -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Order files by number of commits, ascending
    # Written by Corey Haines, scriptified by Gary Bernhardt
    # Show churn for a time range:
    #   $ git churn --since='1 month ago'

    churn = "!f() { \
        git log --all -M -C --name-only --format='format:' \"$@\" \
            | sort \
            | grep -v '^$' \
            | uniq -c \
            | sort \
            | awk 'BEGIN {print \"count\tfile\"} {print $1 \"\t\" $2}' \
            | sort -gr \
            | head -n 20; \
        }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by commit message

    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --regexp-ignore-case --grep=\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Calculate commits count

    cnt = "!f() { \
        git shortlog --summary \"$1\" \
            | awk '{ sum += $1; } END { if (sum > 0) print sum; }'; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Grep on all dangling blobs

    fsgrep = "!f() { \
        git fsck --full | \
        cut -d' ' -f3 | \
        xargs -n1 -t git cat-file -p | \
        grep --color=auto \"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch

    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove last commits (by default it removes the last commit)

    rlc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --hard \"HEAD~$n\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Undo last commits (by default it undoes the last commit)

    ulc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --soft \"HEAD~$n\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Undo last rebase, merge, or reset
    # https://stackoverflow.com/a/692763

    ulr = "!f() { \
        git reset --hard ORIG_HEAD; \
    }; f"

[advice]

    waitingForEditor = false

[color]

    ui = auto

[color "branch"]

    current = green bold
    local = green
    remote = red

[color "diff"]

    meta = yellow bold
    frag = magenta bold

    new = green bold
    old = red bold

    newMoved = green
    oldMoved = red

[color "diff-highlight"]

    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "status"]

    added = green reverse
    changed = yellow reverse
    untracked = red reverse

[commit]

	template = ~/.config/git/commit-template

[core]

    abbrev = 7
    attributesfile = ~/.config/git/attributes
    autocrlf = input
    editor = nvim
    excludesfile = ~/.config/git/ignore
    pager = delta --syntax-theme=TwoDark

[credential]

    # Store credentials in cache for 600s

    helper = cache --timeout=600

[diff]

    # Show blocks of moved text of at least 20
    # alphanumeric characters differently than adds/deletes
    #
    # https://git-scm.com/docs/git-diff#git-diff-zebra

    colorMoved = zebra
    tool = vimdiff

[diff "bin"]

    # Use `hexdump` to diff binary files

    textconv = hexdump -v -C

[difftool]

    prompt = false

[grep]

    extendRegexp = true
    lineNumber = true

[init]

    defaultBranch = main
    templatedir = ~/.config/git/template

[merge]

    conflictstyle = merge
    # https://github.com/whiteinge/diffconflicts
    tool = diffconflicts

[mergetool]

    keepBackup = false
    prompt = false

[mergetool "diffconflicts"]

    cmd = nvim -c DiffConflicts "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
    trustExitCode = true

[pretty]

    custom = "%C(magenta)%h%C(205)%d %C(green)%ar %C(yellow)%s %C(cyan)(%an)"
    #                     │        │           │             │           └─ author name
    #                     │        │           │             └─ message
    #                     │        │           └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

    custom-reflog = "%C(magenta)%h %C(205)%gD %C(green)%ar %C(reset)%C(yellow)%gs"
    #                            │         │            │                      │
    #                            │         │            │                      └─ reflog subject
    #                            │         │            └─ date (relative)
    #                            │         └─ reflog selector full
    #                            └─ hash (abbreviated)

    custom-full = "%C(243)Commit: %C(168)%H%C(172)%d%n%C(243)Date:   %C(34)%ad (%ar)%n%C(243)Title:  %C(208)%s%n%C(243)Author: %C(37)%an <%ae>%n%C(243)Sign:   %C(142)%GS %GK%n%n%C(208 normal)%b"
    #                                     │        │                        │    │                           │                        │    │                           │   │                    │
    #                        hash (full) ─┘        │       date (absolute) ─┘    │                  message ─┘           author name ─┘    │              signer name ─┘   │              body ─┘
    #         decorations (branch, heads or tags) ─┘            date (relative) ─┘                                           author email ─┘                  signing key ─┘

[push]

    # Make `git push` automatically push relevant annotated tags when
    # pushing branches out
    followTags = true

    # Make `git push` automatically create branch on upstream with same
    # local name and enable tracking on this branch
    autoSetupRemote = true

[rebase]

    instructionFormat = "[%an - %ar] %s"
    autoStash = true

[url "git@github.com:"]
	pushInsteadOf = "git://github.com/"
	pushInsteadOf = "https://github.com/"

[include]

    # Load local configs.
    # https://git-scm.com/docs/git-config#_includes
    #
    # NOTE: The following needs to remain at the end of this file in
    #     order to allow any of the above configs to be overwritten
    #     by the local ones

    path = ~/.config/git/config.local
