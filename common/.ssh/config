# Sane security settings for SSH clients
#
# Explanation:
#   http://mochtu.de/2015/01/06/securing-ssh-connections/
# Background:
#   https://github.com/bluz71/dotfiles/blob/master/ssh_config
#   https://stribika.github.io/2015/01/04/secure-secure-shell.html
#   http://chr4.org/blog/2014/09/13/howto-secure-openssh-newer-versions/
#
# NOTE, use the following commands when dealing with hashed known_hosts:
# Client:
#   ssh-keygen -F myhost # Find myhost in known_hosts
#   ssh-keygen -R myhost # Remove myhost from known_hosts
#   ssh-keyscan myhost | ssh-keygen -lf - # Scan host for keys' fingerprints
# Server:
#   ssh-keygen -lf /etc/ssh/ssh_host_ed25519_key # Get key's fingerprint on server

# NOTE: Unless noted otherwise, for each parameter, the first obtained
# value will be used. Hence, more host-specific declarations should be
# given near the beginning of the file, and general defaults at the end

# =====================================================================
# Specific local configs
# =====================================================================

# Include specific non-version-controlled configs (~/.ssh/config.local)
Include config.local


# =====================================================================
# Specific configs
# =====================================================================

# Example for accessing a private machine behind a bastion machine:
# Host inaccessible-host
#     Hostname inaccessible-host
#     User someuser-on-inaccessible-host
#     ServerAliveInterval 30
#     ProxyCommand ssh accessible-host -W %h:%p

# Example for connecting to a (variety of) local virtualbox machine(s)
# Host vboxlocal 127.0.0.1
#     Hostname 127.0.0.1
#     Port 2222
#     StrictHostKeyChecking no
#     UserKnownHostsFile /dev/null

# Example for connecting to an Android device over adb via Termux.
# Req's port forwarding: adb forward tcp:8022 tcp:8022
# Host adbhost 127.0.0.1
#     Hostname 127.0.0.1
#     Port 8022
#     User u0_a155

# Example of various port forwarding
# Host somehost
#     Hostname somehostname
#     ForwardAgent yes
#     ForwardX11 yes
#     DynamicForward 8009 # socks proxy
#     LocalForward 8008 localhost:8008
#     PermitLocalCommand yes
#     LocalCommand print "\e[1;32mWelcome from wherever you are\e[0;m"

# Creating a reverse tunnel in cron
#
# Script (+x!)
# a=`ps -ef | grep 19999 | grep -v grep`
# if [ ! "$a" ]; then
#     ssh -fN -R 19999:localhost:<remoteport> <remoteuse>@<remotehost>
# fi
#
# crontab -e
# * * * * * /path/to/your/script/launch-reverse-ssh-tunneling.sh


# =====================================================================
# Generic configs (Put this last to use as fallback)
# =====================================================================

Host *
  # Automatically cache SSH keys in ssh-agent so we don't need to re-enter
  # password of our SSH keys each time we connect to the server
  AddKeysToAgent yes
  # Enable compression
  Compression yes

  # Enable connection sharing over a single socket
  # NOTE: If SSH connections hang up, try deleting the SSH socket
  # corresponding to that host from ~/.ssh/sockets/ (as mentioned in
  # ControlPath below) before retrying
  ControlMaster auto
  ControlPersist 4h
  ControlPath ~/.ssh/sockets/%r@%h:%p

  # Store host names and IP addresses in ~/.ssh/known_hosts in plain text
  # to improve troubleshooting. If this were a shared machine, then we
  # could've enabled this to store hashed values to improve privacy
  HashKnownHosts no

  # Send encrypted server alive messages through encrypted channel to
  # check if the server is still connected. Max time = 6*600s = 3600s
  ServerAliveCountMax 6
  ServerAliveInterval 600
  # Don't send unencrypted TCP keep-alive signals since we are instead
  # using encrypted ServerAlive params for this
  TCPKeepAlive no

  # Always ask to verify server fingerprint before whitelisting it in
  # ~/.ssh/known_hosts. Also refuse to connect to servers whose host key
  # or fingerprint has changed, to prevent MITM attacks.
  StrictHostKeyChecking ask
  # Ask user to verify only insecure fingerprints coming from DNS records
  VerifyHostKeyDNS ask
